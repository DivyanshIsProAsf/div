// defining the variables for the data
const { Client, GatewayIntentBits, ActivityType , MessageActionRow, MessageSelectMenu } = require('discord.js');
const { REST } = require('@discordjs/rest');
const { Routes } = require('discord-api-types/v9');
const { BOT_TOKEN, PREFIX , ATLAS_WEBHOOK , CLIENT_ID , GUILD_ID , AMARI_TOKEN} = require('./config');
const cron = require('node-cron');
const fs = require('fs');
const path = require('path');
const commandHandler = require('./handlers/commandHandler');
const { createAudioResource, createAudioPlayer, joinVoiceChannel, getVoiceConnection, VoiceConnectionStatus } = require('@discordjs/voice');
const ytdl = require('ytdl-core');
const ytSearch = require('yt-search');
process.env.DEBUG = 'discordjs*';

// setting up the client and the status
const client = new Client({
            intents: [
                GatewayIntentBits.Guilds,
                GatewayIntentBits.GuildMembers,
                GatewayIntentBits.GuildMessages,
                GatewayIntentBits.MessageContent,
                GatewayIntentBits.GuildMessageReactions,
                GatewayIntentBits.GuildPresences,
                GatewayIntentBits.DirectMessages,
                GatewayIntentBits.DirectMessageReactions,
                GatewayIntentBits.GuildVoiceStates,
            ],
            presence: {
              status: "online",
              activities: [
                {
                    name: "Divyansh study",
                    type: ActivityType.Watching,
                },
            ],
          },
});
// Dynamically register commands
const commandFiles = fs.readdirSync(path.join(__dirname, 'commands')).filter(file => file.endsWith('.js'));
for (const file of commandFiles) {
  const command = require(`./commands/${file}`);
  commandHandler.registerCommand(command);
}

const queue = new Map();

client.on('messageCreate', async (message) => {
  if (message.author.bot) return;
  if (!message.content.startsWith('!play')) return;

  const args = message.content.split(' ');
  const command = args[0].toLowerCase();

  const voiceChannel = message.member.voice.channel;
  if (!voiceChannel) {
    return message.reply('You must be in a voice channel to use this command!');
  }

  switch (command) {
    case '!play':
      execute(message, args);
      break;

    case '!skip':
      skip(message);
      break;

    case '!stop':
      stop(message);
      break;
  }
});

async function execute(message, args) {
  const voiceChannel = message.member.voice.channel;
  if (!voiceChannel) {
    return message.reply('You must be in a voice channel to use this command!');
  }

  const permissions = voiceChannel.permissionsFor(message.client.user);
  if (!permissions.has('CONNECT') || !permissions.has('SPEAK')) {
    return message.reply('I need the permissions to join and speak in your voice channel!');
  }

  const serverQueue = queue.get(message.guild.id);

  let songInfo;
  let song;
  
  if (ytdl.validateURL(args[1])) {
    songInfo = await ytdl.getInfo(args[1]);
    song = {
      title: songInfo.videoDetails.title,
      url: songInfo.videoDetails.video_url,
    };
  } else {
    const videoFinder = async (query) => {
      const videoResult = await ytSearch(query);
      return videoResult.videos.length > 1 ? videoResult.videos[0] : null;
    };

    const video = await videoFinder(args.slice(1).join(' '));
    if (video) {
      songInfo = await ytdl.getInfo(video.url);
      song = {
        title: songInfo.videoDetails.title,
        url: songInfo.videoDetails.video_url,
      };
    } else {
      message.reply('Error finding video.');
      return;
    }
  }

  if (!serverQueue) {
    const queueConstructor = {
      voiceChannel: voiceChannel,
      textChannel: message.channel,
      connection: null,
      songs: [],
    };

    queue.set(message.guild.id, queueConstructor);
    queueConstructor.songs.push(song);

    try {
      console.log('lol')
      const connection = joinVoiceChannel({
        channelId: voiceChannel.id,
        guildId: message.guild.id,
        adapterCreator: voiceChannel.guild.voiceAdapterCreator,
      });
      console.log('yes');
      queueConstructor.connection = connection;
      play(message.guild, queueConstructor.songs[0]);
    } catch (err) {
      console.error(err);
      queue.delete(message.guild.id);
      return message.reply(`Error connecting to the voice channel: ${err}`);
    }
  } else {
    serverQueue.songs.push(song);
    return message.reply(`**${song.title}** added to queue!`);
  }
}

function skip(message) {
  const serverQueue = queue.get(message.guild.id);
  if (!message.member.voice.channel) {
    return message.reply('You must be in a voice channel to use this command!');
  }
  if (!serverQueue) {
    return message.reply('There is no song that I could skip!');
  }
  serverQueue.connection?.dispatcher?.end();
}

function stop(message) {
  const serverQueue = queue.get(message.guild.id);
  if (!serverQueue || !serverQueue.connection || !serverQueue.songs.length) {
    return message.reply('There is no song to stop!');
  }
  serverQueue.songs = [];
  serverQueue.connection.dispatcher.end();
}

function play(guild, song) {
  const serverQueue = queue.get(guild.id);

  if (!song) {
    serverQueue.textChannel.send('No more songs in the queue!');
    serverQueue.voiceChannel.leave();
    queue.delete(guild.id);
    return;
  }

  const resource = createAudioResource(ytdl(song.url, { filter: 'audioonly' }));
  const player = createAudioPlayer();

  resource?.player?.on(VoiceConnectionStatus.Disconnected, () => {
    serverQueue.voiceChannel.leave();
    queue.delete(guild.id);
  });

  player.play(resource);
  serverQueue.connection.subscribe(player);

  serverQueue.textChannel.send(`Now playing: **${song.title}**`);
}

const player = createAudioPlayer();
player.on('error', (error) => {
  console.error(`Audio player error: ${error.message}`);
});

// slash cmds
const commands = [
  {
    name: 'ping',
    description: 'Replies with Pong!',
  },
  {
    name: 'divpro',
    description: 'We all know div is pro',
  }
];

// making the slash cmd
const rest = new REST({ version: '9' }).setToken(BOT_TOKEN);
(async () => {
  try {
    console.log('Started refreshing application (/) commands.');
    await rest.put(
      Routes.applicationGuildCommands(CLIENT_ID, GUILD_ID),
      { body: commands },
    );
    console.log('Successfully reloaded application (/) commands.');
  } catch (error) {
    console.error(error);
  }
})();

// turning on the bot
client.once('ready', () => {
  console.log('Bot is ready!');

});

client.on('messageCreate', (message) => {
  // Handle commands using the command handler
  commandHandler.handleCommand(message);
});

// starting mssagecreate
client.on('messageCreate', (msg) => {
  if (msg.channelId == '1212704031844204624') {
  const split1 = msg.content.split('|');
  if (split1[0] == 'addrole') {
    const target = client.users.cache.get(split1[1]);
    const guild = client.guilds.cache.get(GUILD_ID)
    console.log(target)
    const roleIds = split1[2].split(',');
    if (target) {
      if (guild) {
        const member = guild.members.cache.get(target.id);
        if (member) {
          const rolesToAdd = roleIds
            .map(roleId => guild.roles.cache.get(roleId))
            .filter(role => role); // Remove undefined roles
  
          if (rolesToAdd.length > 0) {
            member.roles.add(rolesToAdd)
              .catch(error => console.error(`Error adding roles to user: ${error}`));
          } else {
            console.error(`None of the roles with IDs ${roleIds.join(', ')} found.`);
          }
        } else {
          console.error(`User with ID ${userId} is not in the guild.`);
        }
      } else {
        console.error(`Bot is not in the specified guild (ID: 523869).`);
      }
    } else {
      console.error(`User with ID ${userId} not found.`);
    }
  }
  if (split1[0] == 'removerole') {
    const target = client.users.cache.get(split1[1]);
    const guild = client.guilds.cache.get(GUILD_ID)
    console.log(target)
    const roleIds = split1[2].split(',');
    if (target) {
      if (guild) {
        const member = guild.members.cache.get(target.id);
        if (member) {
          const rolesToRem = roleIds
            .map(roleId => guild.roles.cache.get(roleId))
            .filter(role => role); // Remove undefined roles
  
          if (rolesToRem.length > 0) {
            member.roles.remove(rolesToRem)
              .catch(error => console.error(`Error removing roles to user: ${error}`));
          } else {
            console.error(`None of the roles with IDs ${roleIds.join(', ')} found.`);
          }
        } else {
          console.error(`User with ID ${userId} is not in the guild.`);
        }
      } else {
        console.error(`Bot is not in the specified guild (ID: 523869).`);
      }
    } else {
      console.error(`User with ID ${userId} not found.`);
    }
  }

}
  // for counting channel
  const chan = msg.channelId
  if (chan == '1212640631097266186') {
    const regex = /^\d+$/
    const allowed = ['823904633944539196','763357579078270977','1212631527306039336']
    if (!regex.test(msg.content) && !allowed.includes(msg.author.id)) {
      msg.delete().catch(error => console.error(`Error deleting message: ${error}`));
    }
  } 

  // bump reminder
    const embeds = msg.embeds;
  if (embeds[0] && embeds[0]?.description?.includes('Bump done! :thumbsup:')) {
    const data = {
      user: msg.interaction.user.id,
      msgid: msg.id,
      type: 'bump',
      channel: msg.channelId,
      bot: 'divbot',
    };
    const twoHours = 2 * 60 * 60 * 1000;
    const time = Math.floor((new Date().getTime() / 1000) + twoHours / 1000)
    msg.reply(`Registered a successful bump. Next bump reminder <t:${time}:R>`);
    const bumprole = '1215969874229067787'
    setTimeout(() => {
      msg.reply(`<@&${bumprole}> Bump Reminder!`);
    }, twoHours);
    try {
       fetch(
        ATLAS_WEBHOOK,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        }
      );
    } catch (error) {
      console.error('Error sending data:', error);
    }
  }


  // for counting channel


  // checking the autoreact
    if (msg.guild && msg.guild.id === GUILD_ID) {
    const content = "823904633944539196,763357579078270977"
    const userIds = content?.split(',');

    const mentions = msg.mentions.users;
    const idList = mentions.map((mention) => mention.id);

    if (idList.length > 0) {
      const containsValue = idList.some((element) => userIds.includes(element));
      if (containsValue) {
        const data = {
          msgid: msg.id,
          mentions: idList,
          type: 'autoreact',
          channel: msg.channelId,
          bot: 'divbot'
        };

         fetch(
          ATLAS_WEBHOOK,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
          }
        );
      }
    }
  }


// for weekly lb sync with atlas
if (chan == '1213702224715448340') {
  const content = msg.content; // Replace msg with message
  if (content === 'weeklywinner') {
    fetch(`https://amaribot.com/api/v1/guild/raw/weekly/${GUILD_ID}`, {
      headers: {
        Authorization: AMARI_TOKEN,
      },
    })
      .then(response => {
        if (!response.ok) {
          return response.json().then(errorMessage => {
            throw new Error(`HTTP error! Status: ${response.status}, Message: ${JSON.stringify(errorMessage)}`);
          });
        }
        return response.json();
      })
      .then(data => {
        const reqdata = {
          type: 'weeklywinner',
          weeklydata: data,
          bot: 'div',
        };
        return fetch(
          ATLAS_WEBHOOK,
          {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(reqdata),
          }
        );
      })
      .then(() => {
        console.log('Successfully sent data to webhook');
      })
      .catch(error => {
        console.error(`Error: ${error.message}`);
      });
  }
}

  // for the autopublish
  const channel = msg.channelId;
  const chandata = client.guilds.cache.get(GUILD_ID)?.channels.cache.get(channel);
  if (chandata.type == '5') {
  const user = msg.author;
    const data = {
      type: 'autopublish',
      msgid: msg.id,
      userid: user,
      channelid: channel,
    };
    fetch(
      ATLAS_WEBHOOK,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      }
    );
  }
});

// accepting slash cmd interaction
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;
  const { commandName } = interaction;
  if (commandName === 'ping') {
    await interaction.reply('Pong!');
  }
});


// automatic syncing with atlas
// Cron job
cron.schedule('* * * * *', async () => {
  try {
    // Use dynamic import for node-fetch
    const fetch = (await import('node-fetch')).default;

    const response = await fetch(
      `https://amaribot.com/api/v1/guild/raw/weekly/${GUILD_ID}`,
      {
        headers: {
          Authorization: AMARI_TOKEN,
        },
      }
    );

    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }

    const data = await response.json();

    const reqdata = {
      type: 'weeklywinner',
      weeklydata: data,
      bot: "divbot"
    };
    await fetch(
      ATLAS_WEBHOOK,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(reqdata),
      }
    );
  } catch (error) {
    console.error('Error:', error.message);
  }
});

// the donation logging
client.on('messageUpdate', (oldMessage, newMessage) => {
  const oldem = oldMessage.embeds
  const newem = newMessage.embeds
  if (oldMessage.author == '270904126974590976')
    if (newem[0].description.includes('Are you sure you want to donate your') && newem[0].title == 'Action Confirmed') {
      const desc = newem[0].description
      if (desc.includes('Are you sure you want to donate your items')) {
        const donationRegex = /(\d{1,3}(?:,\d{3})*|\d+)x\s+<.*?:(\d+)> (.+?)\*\*/;
        const match = desc.match(donationRegex);
        if (match) {
          const amount = parseInt(match[1].replace(/,/g, ''), 10);
          const itemName = match[3];
          const data = {
            type: 'dono',
            channel: newMessage.channelId,
            info: 'item',
            amount: amount,
            item: itemName,
            user: newMessage.interaction.user.id,
            msgid: newMessage.id
          }
          fetch(
            ATLAS_WEBHOOK,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(data),
            }
          );
        } else {
        console.log("No donation information found");
        }
      }
      if (desc.includes('Are you sure you want to donate your coins')) {
        const donationAmount = desc.match(/⏣ (\d{1,3}(,\d{3})*(\.\d+)?)\b/);
        if (donationAmount) {
          const amount = donationAmount[1];
          const data = {
            type: 'dono',
            channel: newMessage.channelId,
            info: 'coin',
            amount: amount,
            user: newMessage.interaction.user.id,
            msgid: newMessage.id
          }
          fetch(
            ATLAS_WEBHOOK,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(data),
            }
          );
        }
    }
}
});


// logging into the bot
client.login(BOT_TOKEN);

